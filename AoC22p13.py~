#!usr/bin/env python 3
#This program is my solution to day 13 of Advent of Code's 2022 puzzles.
#So this program takes 2 lists and compares them. If they pass a series of comparisons
#they are said to be in the correct order. 

f = open("p13input.txt") #Just obtaining the data here. Pretty standard for these problems.
#f = open("p13exampleinput.txt")

#Creating a function for comparing integer values in a list. We take the two lists as input.
def compare_int(left, right):
    for x, i in enumerate(left):
        if i > right[x]:
            return False
    return True

#This function compares lists according to the following rules: 
#       1.) If an integer in the left list is greater than an integer in the same position in the right list, then the lists are in order.
#       2.) If the left list runs out of elements first, then the lists are in order. 
def compare_list(left, right):
    for x, i in enumerate(left):
        try:
            if i > right[x]:      #This line tests for condition 1.)
                return False
        except:                   #This line tests for condition 2.), since if the comparison returns an error, it is because the left list is larger
            return False
    if len(left) < len(right):   
        return True
    return None

#This function compares an int with a list.
def compare_dif(left, right):
    if isinstance(left, int):
        if compare_list([left], right):
            return True
        else:
            return False
    else:
        if compare_list(left, [right]):
            return True
        else:
            return False

#def create_nest(data, level):
#    nest = []
#    temp_data = data.split(",")
#    copy_data = temp_data.copy()
#    i = 0
#    while i < 10000:
#        if temp_data[i][0] == "[":
#            nest.append(create_nest(",".join([item for item in copy_data]).replace("[", "", 1)))
#            level = level + 1
#            del(copy_data[0:copy_data.find(']')])
#            i = 
#        try:
#            position = temp_data[i].find(']')
#            if position != -1:
#                if temp_data[i][0:position] != '':
#                    nest.append(temp_data[i][0:position])
#                    return nest
#        except:
#            print("ok")
#        if level != 0:
#            continue
#        if bit.count("[") < bit.count("]"):
#            return nest
#        nest.append(int(bit))
#        del(copy_data[0])
#        i = i + 1


def find_level(data):
    counter = 1
    for i, bit in enumerate(data):
        if bit == "[":
            counter = counter + 1
        if bit == "]":
            counter = counter - 1
        if counter == 0:
            return i


def create_nest2(data):
    nest = []
    temp_bit = ""
    i = 0
    while i < 10000:
        if i == len(data):
            if temp_bit != '':
                nest.append(int(temp_bit))
            break
        if data[i] == "[":
            cn = create_nest2(data[i+1:len(data)])
            nest.append(cn)
            i = i + find_level(data[i+1:len(data)]) + 2
            continue
            
        if data[i] == "]":
            if temp_bit != '':
                nest.append(int(temp_bit))
            return nest
        if data[i] == ",":
            if temp_bit == "":
                i = i + 1
                continue
            nest.append(int(temp_bit))
            temp_bit = ""
            i = i + 1
            continue
        temp_bit = temp_bit + data[i]
        i = i + 1
    return nest




signals = []
signal = []
for x, line in enumerate(f):
    if line == "\n":
        continue
    signal.append(create_nest2(line[1:len(line)-2]))
    if (x - 1)%3 == 0:
        signals.append(signal)
        signal = []

sigbin = []
counter = 0

def compare(sig_1, sig_2):
    if len(sig_1) == 0 and len(sig_2) != 0:
        return True
    if len(sig_1) != 0 and len(sig_2) == 0:
        return False
    if len(sig_1) == 0 and len(sig_2) == 0:
        return None
    for i, element in enumerate(sig_1):
        try:
            p = sig_2[i]
        except:
            return False
        if isinstance(element, int) and isinstance(sig_2[i], int):
            try:
                if sig_2[i] > sig_1[i]:
                    return True
                if sig_2[i] < sig_1[i]:
                    return False
                if i == len(sig_1)-1 and i == len(sig_2)-1:
                    return None
                if i == len(sig_1)-1 and i < len(sig_2)-1:
                    return True
            except:
                if i > len(sig_2)-1:
                    return False
        if isinstance(element, int) and isinstance(sig_2[i], list):
            if compare([element], sig_2[i]) == None and i == len(sig_1)-1 and i < len(sig_2)-1:
                return True
            if compare([element], sig_2[i]) == None:
                continue
            else:
                return compare([element], sig_2[i])
        if isinstance(element, list) and isinstance(sig_2[i], int):
            if compare(element, [sig_2[i]]) == None and i == len(sig_1)-1 and i < len(sig_2)-1:
                return True
            elif compare(element, [sig_2[i]]) == None:
                continue
            else:
                return compare(element, [sig_2[i]])
        if isinstance(element, list) and isinstance(sig_2[i], list):
            if compare(element, sig_2[i]) == None:
                continue
            else:
                return compare(element, sig_2[i])



counter = 0

for i, signal in enumerate(signals):
    if compare(signal[0], signal[1]) == True:
        print(signal[0])
        print("\n")
        print(signal[1])
        counter = counter + i + 1

print(counter)

#part 2
ordered = []
signal_dump = []
for signal in signals:
    signal_dump.append(signal[0])
    signal_dump.append(signal[1])


signal_dump.append([[2]])
signal_dump.append([[6]])
for i, signal in enumerate(signal_dump):
    if i == 0:
        ordered.append(signal)
        continue
    print(ordered)
    for j, sig in enumerate(ordered):
        if compare(sig, signal) == False:
            print(sig, signal)
            ordered.insert(j, signal)
            break
        elif j == len(ordered) - 1:
            ordered.append(signal)
            break

code = 1
for i, element in enumerate(ordered):
    if element == [[2]] or element == [[6]]:
        code = code*(i+1)

print(ordered)
print(code)
print(compare([9], [[8,7,6]]))
             
    





